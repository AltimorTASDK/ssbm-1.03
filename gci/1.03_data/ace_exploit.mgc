ACE EXPLOIT

This file sets up the data and code for Melee's ACE (Arbitrary Code Execution)
save file exploit. It is required in order to run custom code from a save file.
--------------------------------------------------------------------------------

!begin
# Make the first nametag so long that it overflows into the stack's return pointer
!loc 8045d850
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD 804ee8f8 8045d930 00000000

# This forces execution to branch to 8045d930 instead of back to the nametag
# function. Better yet, 8045d930 is at a different offset in each version
# of Melee, because the save file loads into slightly different spots.
# This means we can conveniently run different code for each Melee version
# using only one save file.
# 
# v1.02: 8045d930
# v1.01: 8045e610
# v1.00: 8045f8f8

# --------------
# v1.02 Loader 1
# --------------
!loc 8045d930
!asm

lis r11,0x8046
ori r11,r11,0x8f00
lis r12,0x8023
ori r12,r12,0x9e9c
lis r3,0x8043
lwz r4,0x2f74(r3)
cmpwi r4,0			#is a memcard save in progress?
beq 0x10
stw r11,0x2f74(r3)	#if so, run loader2 when it's done and return
mtctr r12
bctr
mtctr r11			#if not, run loader2 now and set LR to return
mtlr r12
bctr

!asmend

# --------------
# v1.01 Loader 1
# --------------
!loc 8045e610
!asm

lis r11,0x8046
ori r11,r11,0xa020
lis r12,0x8023
ori r12,r12,0x9700
lis r3,0x8043
lwz r4,0x2294(r3)
cmpwi r4,0			#is a memcard save in progress?
beq 0x10
stw r11,0x2294(r3)	#if so, run loader2 when it's done and return
mtctr r12
bctr
mtctr r11			#if not, run loader2 now and set LR to return
mtlr r12
bctr

!asmend

# --------------
# v1.00 Loader 1
# --------------
!loc 8045f8f8
!asm

lis r11,0x8046
ori r11,r11,0x8b38
lis r12,0x8023
ori r12,r12,0x8b90
lis r3,0x8043
lwz r4,0x0fb4(r3)
cmpwi r4,0			#is a memcard save in progress?
beq 0x10
stw r11,0x0fb4(r3)	#if so, run loader2 when it's done and return
mtctr r12
bctr
mtctr r11			#if not, run loader2 now and set LR to return
mtlr r12
bctr

!asmend


# Now, we branch to the Loader 2 function and run whatever code we want before
# rebooting the game. In this example, we iterate through a datacopy table
# that conveniently lets us copy our custom data to other places in Melee
# memory, away from the save data region. (See datacopy_table.mgc)
# Then, we run the compiled C++ code from code.bin.

# Moved to block 6 because 20XX automatically replaces block 7

# --------------
# v1.02 Loader 2
# --------------
!loc 80468f00
!asm

mflr r0
stw r0,0x4(sp)
stwu sp,-0x20(sp)
stw r31,0x1c(sp)
stw r30,0x18(sp)
stw r29,0x14(sp)
stw r28,0x10(sp)

#r7: pointer to datacopy table
lis r7,0x8046
ori r7,r7,0x0a64

DATACOPYLOOP:
lwz r4,0(r7)	#source
cmpwi r4,0
beq CODEINIT
lwz r3,4(r7)	#destination
lwz r5,8(r7)	#size

#copy data
subi r4,r4,4
subi r6,r3,4
addi r5,r5,4
b 0xc
lwzu r0,0x4(r4)
stwu r0,0x4(r6)
subic. r5,r5,4
bne+ -0xc

#next string
addi r7,r7,0xc
b DATACOPYLOOP

CODEINIT:
lis r12,0x817f
mtctr r12
bctr

!asmend

# Gets copied to 817f0000
!loc 80469000
!asm

#Zero fill entire nametag area
lis r3,0x8045
ori r3,r3,0xd850
li r4,0
li r5,0
ori r5,r5,0xc344
lis r12,0x8000
ori r12,r12,0x3130
mtctr r12
bctrl

#Init nametag data
li r3,2
lis r12,0x8015
ori r12,r12,0xf600
mtctr r12
bctrl

#Reload game data
lis r12,0x8001
ori r12,r12,0xcbbc
mtctr r12
bctrl

#Run compiled code init
lis r12,0x817f
ori r12,r12,0x1000
li r4,0
icbi r4,r12
sync
isync
mtctr r12
bctrl

#Clear cache
lis r3,0x8000
lis r4,0x3c
lis r12,0x8032
ori r12,r12,0x8f50
mtctr r12
bctrl

li r3,6
lis r12,0x801a
ori r12,r12,0x428c
mtctr r12
bctrl

li r0,5
sth r0,-0x4ad8(r13)
lwz r3,-0x4f80(r13)
lwz r4,0x8(r3)
li r30,0
stb r30,0(r4)

END:
lis r12,0x801a
ori r12,r12,0x4b60
mtctr r12
bctrl

lwz r0,0x24(sp)
lwz r31,0x1c(sp)
lwz r30,0x18(sp)
lwz r29,0x14(sp)
lwz r28,0x10(sp)
addi sp,sp,0x20
mtlr r0
blr

!asmend

# --------------
# v1.01 Loader 2
# --------------
!loc 8046ad00
!asm

mflr r0
stw r0,0x4(sp)
stwu sp,-0x20(sp)
stw r31,0x1c(sp)
stw r30,0x18(sp)
stw r29,0x14(sp)
stw r28,0x10(sp)

#r7: pointer to datacopy table
#8045FB84 in v1.01

lis r7,0x8045
ori r7,r7,0xfb84

DATACOPYLOOP:
lwz r4,0(r7)	#source
cmpwi r4,0
beq CODEINIT
lwz r3,4(r7)	#destination
lwz r5,8(r7)	#size

#copy data
subi r4,r4,4
subi r6,r3,4
addi r5,r5,4
b 0xc
lwzu r0,0x4(r4)
stwu r0,0x4(r6)
subic. r5,r5,4
bne+ -0xc

#next data
addi r7,r7,0xc
b DATACOPYLOOP

CODEINIT:

#Zero fill entire nametag area
lis r3,0x8045
ori r3,r3,0xcb70
li r4,0
li r5,0
ori r5,r5,0xc344
lis r12,0x8000
ori r12,r12,0x3130
mtctr r12
bctrl

#Init nametag data
li r3,2
lis r12,0x8015
ori r12,r12,0xf37c
mtctr r12
bctrl

#Reload game data
lis r12,0x8001
ori r12,r12,0xcbbc
mtctr r12
bctrl

#Run compiled code init
lis r12,0x817f
ori r12,r12,0x1000
li r4,0
icbi r4,r12
sync
isync
mtctr r12
bctrl

#Clear cache
lis r3,0x8000
lis r4,0x3c
lis r12,0x8032
ori r12,r12,0x8278
mtctr r12
bctrl

#80479050: scene controller, equivalent to 80479d30
li r3,6
lis r12,0x801a
ori r12,r12,0x3c44
mtctr r12
bctrl

li r0,5
sth r0,-0x4ad8(r13)
lwz r3,-0x4f80(r13)
lwz r3,0x8(r3)
li r30,0
stb r30,0(r3)

lis r12,0x801a
ori r12,r12,0x4518
mtctr r12
bctrl

lwz r0,0x24(sp)
lwz r31,0x1c(sp)
lwz r30,0x18(sp)
lwz r29,0x14(sp)
lwz r28,0x10(sp)
addi sp,sp,0x20
mtlr r0
blr

!asmend

# --------------
# v1.00 Loader 2
# --------------
!loc 8046ab00
!asm

mflr r0
stw r0,0x4(sp)
stwu sp,-0x20(sp)
stw r31,0x1c(sp)
stw r30,0x18(sp)
stw r29,0x14(sp)
stw r28,0x10(sp)

#r7: pointer to datacopy table
#8045E69C in v1.00

lis r7,0x8045
ori r7,r7,0xe69c

DATACOPYLOOP:
lwz r4,0(r7)	#source
cmpwi r4,0
beq CODEINIT
lwz r3,4(r7)	#destination
lwz r5,8(r7)	#size

#copy data
subi r4,r4,4
subi r6,r3,4
addi r5,r5,4
b 0xc
lwzu r0,0x4(r4)
stwu r0,0x4(r6)
subic. r5,r5,4
bne+ -0xc

#next data
addi r7,r7,0xc
b DATACOPYLOOP

CODEINIT:

#Zero fill entire nametag area
lis r3,0x8045
ori r3,r3,0xb888
li r4,0
li r5,0
ori r5,r5,0xc344
lis r12,0x8000
ori r12,r12,0x3130
mtctr r12
bctrl

#Init nametag data
li r3,2
lis r12,0x8015
ori r12,r12,0xed9c
mtctr r12
bctrl

#Reload game data
lis r12,0x8001
ori r12,r12,0xcb3c
mtctr r12
bctrl

#Run compiled code init
lis r12,0x817f
ori r12,r12,0x1000
li r4,0
icbi r4,r12
sync
isync
mtctr r12
bctrl

#Clear cache
lis r3,0x8000
lis r4,0x3c
lis r12,0x8032
ori r12,r12,0x75ec
mtctr r12
bctrl

#80477d68: scene controller, equivalent to 80479d30
li r3,6
lis r12,0x801a
ori r12,r12,0x3544
mtctr r12
bctrl

li r0,5
sth r0,-0x4ad8(r13)
lwz r3,-0x4f80(r13)
lwz r3,0x8(r3)
li r30,0
stb r30,0(r3)

lis r12,0x801a
ori r12,r12,0x3e18
mtctr r12
bctrl

lwz r0,0x24(sp)
lwz r31,0x1c(sp)
lwz r30,0x18(sp)
lwz r29,0x14(sp)
lwz r28,0x10(sp)
addi sp,sp,0x20
mtlr r0
blr

!asmend